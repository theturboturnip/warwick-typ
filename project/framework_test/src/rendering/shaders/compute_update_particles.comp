#version 450
#extension GL_ARB_separate_shader_objects : enable

#include "global_descriptor_sets.glsl"
#include "global_structures.glsl"

layout (local_size_x = 256) in;

layout (constant_id = 0) const uint particleBufferLength = 0;

layout(push_constant) uniform pushConstants {
    ParticleStepParams params;
};

layout (set=0, binding=0, std140) buffer ParticleBuffer {
    Particle particles[];
};
SIM_DATA_SAMPLER(1, simBufferDataSampler)
//layout (set=2, binding=0, r32f) uniform image2D turbulenceImage;

void main() {
    // Current SSBO index
    uint index = gl_GlobalInvocationID.x;
    // Don't try to write beyond particle count
    if (index >= particleBufferLength)
        return;
    const vec4 oldParticleData = particles[index].data;
    if (!particleEnabled(oldParticleData))
        return;

    vec2 pos = particlePos(oldParticleData);
    float rot = particleRot(oldParticleData);

    for (int i = 0; i < 4; i++) {
        //     TODO - offset by 1/2 pixel?
        vec2 offset = vec2(0,0);
        vec4 fluidData = texture(simBufferDataSampler, pos + offset);
        if (fluidData.w > 0.5) break;

        // xy are in m/s, timestep in s,
        pos += (fluidData.xy * params.timestep / 4) / vec2(params.xLength, params.yLength);
    }


    particles[index].data.xy = pos;
}
