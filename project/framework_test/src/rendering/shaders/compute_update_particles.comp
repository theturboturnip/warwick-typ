#version 450
#extension GL_ARB_separate_shader_objects : enable

#include "global_descriptor_sets.glsl"
#include "global_structures.glsl"

layout (local_size_x = 256) in;

SPEC_CONST_PARTICLE_COUNT()

PUSH_CONSTANTS(ParticleStepParams)

DS_PARTICLE_INPUT_BUFFER(0, old_particles)
DS_PARTICLE_OUTPUT_BUFFER(1, new_particles)
DS_SIM_DATA_SAMPLER(2, simBufferDataSampler)
//layout (set=2, binding=0, r32f) uniform image2D turbulenceImage;

void main() {
    // Current SSBO index
    uint index = gl_GlobalInvocationID.x;
    // Don't try to write beyond particle count
    if (index >= particleBufferLength)
        return;
    Particle particle = old_particles[index];
    if (!particleEnabled(particle.data))
        return;

    vec2 pos = particlePos(particle.data);
    float rot = particleRot(particle.data);

    for (int i = 0; i < 4; i++) {
        //     TODO - offset by 1/2 pixel?
        vec2 offset = vec2(0,0);
        vec4 fluidData = texture(simBufferDataSampler, pos + offset);
        if (fluidData.w > 0.5) break;

        // xy are in m/s, timestep in s,
        pos += (fluidData.xy * pConsts.timestep / 4) / vec2(pConsts.xLength, pConsts.yLength);
    }

    particle.data = vec4(pos, rot, 1);
    new_particles[index] = particle;
}
